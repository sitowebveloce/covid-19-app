{"version":3,"sources":["Component/Nav.js","Component/Footer.js","Component/Card.js","Component/Search.js","Component/CardWrapper.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","display","alignItems","flexCenter","justifyContent","month","padding","color","virus","covid","fontSize","codid19","paddingRight","wiki","ButtonAppBar","React","useState","mediaSm","setMediaSm","classes","queries","window","addEventListener","mqsm","matchMedia","matches","useEffect","mqFunction","showMonth","Date","toLocaleString","className","AppBar","position","Toolbar","IconButton","edge","menuButton","aria-label","href","target","role","Typography","variant","toUpperCase","Footer","maxWidth","marginTop","media","margin","height","width","deathNumb","fontWeight","map","MediaCard","props","country","lastUpdate","confirmed","recovered","deaths","lat","long","url","Card","CardMedia","image","getCode","CardContent","gutterBottom","component","moment","format","CardActions","spacing","handleSubmit","e","preventDefault","BasicTextFields","search","setSearch","noValidate","autoComplete","onSubmit","TextField","id","label","value","onChange","flexDirection","homeBtn","cursor","maxValue","gridTemplateColumns","gridTemplateRows","gridGap","CardWrapper","dataArr","setDataArr","maxVal","setMaxVal","fetchFromBackEnd","a","axios","fetchData","data","res","maxDeaths","response","console","log","status","request","config","domObj","c","indx","regex","RegExp","key","attributes","Country_Region","match","Last_Update","Confirmed","Recovered","Deaths","Lat","Long_","undefined","length","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f11cd37d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  // menuButton: {\r\n  //   marginRight: theme.spacing(2),\r\n  // },\r\n  title: {\r\n    display:'flex',\r\n    alignItems:'center'\r\n  },\r\n  flexCenter:{\r\n    justifyContent:'center',\r\n  },\r\n  month:{\r\n    padding:'0 10px',\r\n    color:'pink'\r\n  },\r\n  virus:{\r\n    padding:'0 4px'\r\n  },\r\n  covid:{\r\n    fontSize:'1.6rem',\r\n    padding:'0 4px',\r\n    color:'red'\r\n  },\r\n  codid19:{\r\n    fontSize:'0.9rem',\r\n    paddingRight:'6px'\r\n  },\r\n  wiki:{\r\n    color:'#ffffff',\r\n    fontSize:'0.8rem'\r\n  }\r\n\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  // STATE\r\n  const [mediaSm, setMediaSm] = React.useState(false);\r\n  // Styles\r\n  const classes = useStyles();\r\n  // Check window size event listener media query\r\n  const queries = {\r\n    xs: '(max-width: 320px)', //query for xs devices\r\n    sm: '(max-width: 720px)',\r\n    md: '(max-width: 1024px)'\r\n    }\r\n  \r\n  window.addEventListener('resize', ()=>{\r\n   // Media query sizes\r\n    // let mqxs = window.matchMedia(queries.xs);\r\n    let mqsm = window.matchMedia(queries.sm);\r\n    // let mqmd = window.matchMedia(queries.md);\r\n    // If true set state\r\n    if(mqsm.matches){\r\n      setMediaSm(mqsm.matches);\r\n    }else{\r\n      setMediaSm(false);\r\n    }\r\n  });\r\n\r\n  let mqFunction = ()=>{\r\n    let mqsm = window.matchMedia(queries.sm);\r\n    if(mqsm.matches){\r\n      setMediaSm(mqsm.matches);\r\n    }else{\r\n      setMediaSm(false);\r\n    }\r\n  }\r\n\r\n  React.useEffect(()=>{\r\n    mqFunction();\r\n  },[]);\r\n\r\n  // Month\r\n  const today = new Date();\r\n  let showMonth = today.toLocaleString('default', {month: 'long'});\r\n\r\n//\r\n// â”€â”€â”€ RETURN â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={mediaSm ? classes.flexCenter : classes.title }>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <a className={classes.wiki} href=\"https://it.wikipedia.org/wiki/COVID-19\" target='blank'>\r\n              <span role='img' aria-label='wiki link'>\r\n                wiki\r\n                </span>\r\n                </a>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n          <span role='img' className={classes.virus} aria-label='covid19'> ðŸ¦  </span> \r\n          <span className={classes.covid}> COVID-19 </span>\r\n         {mediaSm ? '': <small> month </small> }  <span className={classes.month}> { showMonth.toUpperCase() } <span role='img' aria-label='worl'> ðŸŒŽ </span></span>\r\n    \r\n          </Typography>\r\n          {/* <Button color=\"inherit\">Login</Button> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div className=\"covid-footer\">\r\n            made with <a href=\"https://github.com/alexpaper/covid-19-app\" target='blank'> <span role='img' aria-label='heart'> ðŸ’™ </span></a> by @lpaper\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\n// import CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n// import Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {getCode} from 'country-list';\r\nimport moment from 'moment';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n    marginTop: '20px'\r\n  },\r\n  media: {\r\n    margin: '0 auto',\r\n    height: 100,\r\n    width: 80\r\n  },\r\n  deathNumb:{\r\n    fontWeight:'800',\r\n    color:'red'\r\n  },\r\n  map:{\r\n      width:'100%',\r\n      height:120\r\n  }\r\n});\r\n\r\nexport default function MediaCard(props) {\r\n    // Deconstruct\r\n    const {\r\n        country, \r\n        lastUpdate, \r\n        confirmed,\r\n        recovered,\r\n        deaths,\r\n        lat,\r\n        long} = props;\r\n \r\nconst classes = useStyles();\r\n// Create URL\r\nlet url = `https://www.google.com/maps/search/?api=1&query=${lat},${long}`\r\n  //\r\n  // â”€â”€â”€ RETURN â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\r\n        \r\n  return (\r\n    <Card className={classes.root}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={`https://www.countryflags.io/${getCode(country)}/shiny/64.png`}\r\n          title={country}\r\n        />\r\n        <div className=\"map\">\r\n        <div className=\"confirmed\"><b>Country Region Map: </b> <a className='covid-map-link' href={url} target='blank'>Link</a></div>\r\n        </div>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {country}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\r\n  <div className=\"update\"><b>Last Update: </b> {moment(lastUpdate).format('MMMM Do YYYY, h:mm:ss a')}</div>\r\n  <div className=\"confirmed\"><b>Confirmed: </b> {confirmed}</div>\r\n  <div className={classes.recovered}><b> Recovered :</b> {recovered}</div>\r\n  <div className=\"deaths\"><b>Deaths: </b> <span className={classes.deathNumb}> {deaths} </span></div>\r\n          </Typography>\r\n        </CardContent>\r\n     \r\n      <CardActions>\r\n      <FavoriteBorderIcon />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\n// Prevent default submit\r\nconst handleSubmit = (e)=>{\r\n    e.preventDefault()\r\n}\r\nexport default function BasicTextFields(props) {\r\n    // STATE \r\n    const {search, setSearch} = props;\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.root} \r\n    noValidate \r\n    autoComplete=\"off\"\r\n    onSubmit={handleSubmit}\r\n    >\r\n      <TextField \r\n      id=\"standard-basic\" \r\n      label=\"Search by Country\"\r\n      value={search}\r\n      onChange={e=> setSearch(e.target.value)}\r\n      />\r\n\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Card from './Card';\r\nimport Search from './Search';\r\nimport axios from 'axios';\r\n// import HomeIcon from '@material-ui/icons/Home';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Styles\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        justifyContent:'center',\r\n        alignItems:'center'\r\n    },\r\n    homeBtn: {\r\n        cursor:'pointer',\r\n        padding:'10px'\r\n    },\r\n    maxValue:{\r\n        color:'red',\r\n        display:'grid',\r\n        gridTemplateColumns:'1fr',\r\n        gridTemplateRows:'1fr 1fr',\r\n        alignItems:'left',\r\n        gridGap:'5px'\r\n    }\r\n  });\r\n\r\n//\r\n// â”€â”€â”€ EXPORT â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\r\n\r\nexport default function CardWrapper() {\r\n       \r\n// â”€â”€â”€ STATE â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\r\nconst [dataArr, setDataArr] = React.useState([]);\r\nconst [maxVal, setMaxVal] = React.useState([]);\r\nconst [search, setSearch] = React.useState('');\r\n\r\n// Classes\r\nconst classes = useStyles();\r\n\r\n//\r\n// â”€â”€â”€ FETCH FROM BACKEND â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\r\nconst fetchFromBackEnd = async () =>{\r\n    let url = '/cov19/v1'\r\n    try {\r\n        let fetchData = await axios(url);\r\n        let res = await fetchData.data;\r\n        // console.log(res.data);\r\n        // Set State\r\n        // All data\r\n        setDataArr(res.data);\r\n        // Max deaths value\r\n        setMaxVal(res.maxDeaths)\r\n    }\r\n    catch(error){\r\n        if (error.response) {\r\n            // The request was made and the server responded with a status code\r\n            // that falls out of the range of 2xx\r\n            // console.log(error.response.data);\r\n             console.log(error.response.status);\r\n            // console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n            // http.ClientRequest in node.js\r\n            // console.log(error.request);\r\n          } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n            // console.log('Error', error.message);\r\n          }\r\n          console.log(error.config);\r\n    }\r\n}\r\n\r\n// UseEffect\r\nReact.useEffect(()=>{\r\n    fetchFromBackEnd();\r\n}, [])\r\n\r\n//*** DOM Object */\r\nlet domObj = dataArr.map((c, indx) =>{\r\n    // Define regex\r\n    let regex = new RegExp(`^${search}`, 'gi');\r\n\r\n   return (\r\n    <div key={indx}>\r\n     {\r\n         search === '' \r\n         ?  \r\n      <Card \r\n      country={c.attributes.Country_Region} \r\n      lastUpdate={c.attributes.Last_Update}\r\n      confirmed={c.attributes.Confirmed}\r\n      recovered={c.attributes.Recovered}\r\n      deaths={c.attributes.Deaths}\r\n      lat={c.attributes.Lat}\r\n      long={c.attributes.Long_}\r\n      />\r\n        :\r\n        c.attributes.Country_Region.match(regex)\r\n        ?\r\n        <Card \r\n        country={c.attributes.Country_Region} \r\n        lastUpdate={c.attributes.Last_Update}\r\n        confirmed={c.attributes.Confirmed}\r\n        recovered={c.attributes.Recovered}\r\n        deaths={c.attributes.Deaths}\r\n        lat={c.attributes.Lat}\r\n        long={c.attributes.Long_}\r\n        />\r\n        :\r\n        null\r\n     }\r\n    </div>\r\n   ) \r\n});\r\n\r\n    //\r\n    // â”€â”€â”€ RETURN â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n           {/* <a href=\"/\"> <HomeIcon className={classes.homeBtn}/></a> */}\r\n           <a href=\"/\" className={classes.homeBtn}> <span role='img' aria-label='reload'>ðŸ”ƒ</span></a>\r\n    <div className={classes.maxValue}>\r\n        <div>\r\n     <b> Country: </b> {maxVal !== undefined && maxVal.length > 0 ? \r\n    (`${maxVal[0].country} `) : null}\r\n    </div>\r\n    <div>\r\n     <b> Max Deaths: </b> {maxVal !== undefined && maxVal.length > 0 ? \r\n    (`${maxVal[0].value}`) : null}\r\n    </div>\r\n    </div>\r\n     <Search search={search} setSearch={setSearch} />\r\n            {domObj}\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Nav from './Component/Nav';\nimport Footer from './Component/Footer';\nimport './App.css';\nimport CardWrapper from './Component/CardWrapper';\n\nfunction App() {\n  return (\n    <>\n     <Nav />\n    <div className=\"App\">\n     <CardWrapper />\n     <Footer />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}